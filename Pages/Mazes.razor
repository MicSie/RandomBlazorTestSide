@page "/mazes"
@using Blazor.Extensions
@using Blazor.Extensions.Canvas
@using Models.Mazes

@inject IJSRuntime JsRuntime;

<h3>Mazes (@w / @h)</h3>
<div>
<div id="theCanvas" style="float: left;">
    <BECanvas Width="@w" Height="@w" @ref="_canvasReference"></BECanvas>
</div>
<div style="position: relative;left: 25px;">
    <button class="btn btn-primary" @onclick="IncrementCount">UP</button>
    <button class="btn btn-primary" @onclick="DecrementCount">DOWN</button>

    <button class="btn btn-primary" @onclick="StartTicker">Start</button>
    <button class="btn btn-primary" @onclick="StopTicker">Stop</button>
    <br />
    <div class="slidecontainer">
        <input type="range" min="1" max="60" value="30" class="slider" id="myRange">
    </div>
</div></div>
@code
{
    private BoardManager boardManager;
    private int w = 800;
    private int h = 800;



    private void IncrementCount()
    {
        w += 10;
        h += 10;
    }

    private void DecrementCount()
    {
        w -= 10;
        h -= 10;
    }

    private void StartTicker()
    {
        boardManager.Start();
    }

    private void StopTicker()
    {
        boardManager.Stop();
    }

    private async void Paint()
    {
        await boardManager.Paint();
    }

    BECanvasComponent _canvasReference = null;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            boardManager = new BoardManager(_canvasReference);
            await boardManager.Init();
        }
    }

    [JSInvokable]
    public async ValueTask WindowLoop(float timeStamp)
    {
        await boardManager.Paint();
    }

    protected override async Task OnInitializedAsync()
    {
        await JsRuntime.InvokeAsync<object>("initLoop", DotNetObjectReference.Create(this));
        await base.OnInitializedAsync();
    }
}